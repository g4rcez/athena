export default class Rules {
    private rules;
    constructor();
    $rules: Array<any>;
    static new(): Rules;
    static rulesName(): string[];
    email(message: string): this;
    cpf(message: string): this;
    cnpj(message: string): this;
    array(message: string): this;
    isEmpty(message: string): this;
    equals(compare: any, message: string): this;
    startsWith(compare: any, message: string): this;
    endsWith(compare: any, message: string): this;
    isJson(message: string): this;
    isDate(message: string): this;
    isAfterDate(after: any, message: string): this;
    isBeforeDate(before: any, message: string): this;
    number(message: string): this;
    string(message: string): this;
    object(message: string): this;
    max(compare: number, message: string): this;
    min(compare: number, message: string): this;
    minOrEquals(compare: number, message: string): this;
    maxOrEquals(compare: number, message: string): this;
    length(compare: number, message: string): this;
    uniq(compare: any, message: string): this;
    allUniq(message: string): this;
    negative(message: string): this;
    positive(message: string): this;
    blank(message: string): this;
    jwt(message: string): this;
    ipv4(message: string): this;
    http(message: string): this;
    ipv6(message: string): this;
    creditCard(message: string): this;
    must(condition: boolean, message: string): this;
    mustBe(callback: Function, message: string): this;
    regex(regex: string | RegExp, message: string): this;
    uuid(message: string): this;
    check(value: any): boolean;
}
